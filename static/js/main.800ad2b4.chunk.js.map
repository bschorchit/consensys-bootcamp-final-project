{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","props","componentDidMount","eth","net","getId","networkId","deployedNetwork","productTokenArtifact","networks","_producttoken","Contract","abi","address","otherdeployedNetwork","productStoreArtifact","_store","anotherdeployedNetwork","multisigBioFundArtifact","_biofund","getAccounts","accounts","_account","utils","toChecksumAddress","methods","owner","call","_owner","owners","_firstBioFundOwner","_secondBioFundOwner","_thirdBioFundOwner","getBalance","options","_biofundBalance","setState","account","producttoken","store","biofund","firstBioFundOwner","secondBioFundOwner","thirdBioFundOwner","biofundBalance","decideHowToLoad","on","alert","error","loadForOwner","document","getElementById","style","display","loadForUser","refreshUserBalance","loadForMultisig","refreshMultiSigBalance","setStatus","message","innerHTML","getElementsByClassName","state","balanceOf","balance","totalSupply","supply","getAllProductsFromOwner","checkEthBalance","from","ethBalance","getAllProductsForSale","getTransactionInfo","handleSetStoreAddress","event","preventDefault","setStoreAddress","newStore","send","toastProvider","addMessage","variant","handleCreateProduct","createProduct","newProductName","newProductBio","handleSetProductForSale","setProductForSale","newSaleId","newSalePrice","getProductInfo","ownerOf","idForInfo","productOwner","getProductName","productName","isProductBio","productBio","getProductCreator","productCreator","isProductForSale","productSale","getProductPrice","productPrice","_productsOwned","_sellOptions","id","push","value","label","productsOwned","sellOptions","length","_buyOptions","_infoOptions","buyOptions","infoOptions","handleSetNewProductContract","setNewProductContract","newProductToken","handleSetBiodiversityFund","setBiodiversityFund","newBioFund","handleBuyProduct","newPurchaseId","_price","buyProduct","handleUserWithdraw","_ethBalance","withdraw","handleSubmitTransaction","submitTransaction","newTxAddress","newTxValue","handleApproveTransaction","confirmTransaction","idForApproval","handleRevokeApproval","revokeConfirmation","idToRevoke","handleExecuteTransaction","executeTransaction","idToExecute","getTransactionDestination","txIdForInfo","txDestination","getTransactionValue","txValue","isTransactionExecuted","txExecuted","hasUserConfirmed","txUserConfirm","handleChange","target","name","undefined","this","className","Box","bg","border","borderColor","Heading","as","Text","fontWeight","italic","Flex","fontSize","textAlign","width","Blockie","opts","seed","String","Button","size","mainColor","onClick","Field","Select","type","placeholder","required","onChange","p","Form","Input","ToastMessage","Provider","ref","node","Component","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.800ad2b4.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport productTokenArtifact from \"./contracts/ProductToken.json\";\nimport productStoreArtifact from \"./contracts/ProductStore.json\";\nimport multisigBioFundArtifact from \"./contracts/MultiSigBioFund.json\";\nimport getWeb3 from \"./getWeb3\";\nimport { Text, Button, Box, Flex, Form, Input, Heading, Field, Select, ToastMessage, Blockie} from 'rimble-ui';\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      web3: undefined,\n      account: undefined, \n      producttoken: undefined,\n      store: undefined,\n      biofund: undefined,\n      owner: undefined, \n      firstBioFundOwner: undefined, \n      secondBioFundOwner: undefined, \n      thirdBioFundOwner: undefined,\n      biofundBalance: 0,\n      newProductName: \"\",\n      newProductBio: true,\n      newSaleId: 1,\n      newSalePrice: 0,\n      newPurchaseId: 1,\n      productsOwned: [],\n      sellOptions: [],\n      buyOptions: [],\n      infoOptions: [],\n      newStore: \"\",\n      newProductToken: \"\",\n      newBioFund: \"\",\n      newTxAddress: \"\",\n      newTxValue: 0,\n      idForApproval: 0,\n      idToRevoke: 0,\n      idToExecute: 0,\n      idForInfo: 1,\n      txIdForInfo: 0\n    }\n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = productTokenArtifact.networks[networkId];\n      const _producttoken = new web3.eth.Contract(\n        productTokenArtifact.abi,\n        deployedNetwork.address,\n      );\n\n      const otherdeployedNetwork = productStoreArtifact.networks[networkId];\n      const _store = new web3.eth.Contract(\n        productStoreArtifact.abi,\n        otherdeployedNetwork.address,\n      );\n\n      const anotherdeployedNetwork = multisigBioFundArtifact.networks[networkId];\n      const _biofund = new web3.eth.Contract(\n        multisigBioFundArtifact.abi,\n        anotherdeployedNetwork.address,\n      );\n    \n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get state variables\n      const _account = web3.utils.toChecksumAddress(accounts[0]);\n      const _owner = web3.utils.toChecksumAddress(await _store.methods.owner().call());\n      const _firstBioFundOwner = web3.utils.toChecksumAddress(await _biofund.methods.owners(0).call());\n      const _secondBioFundOwner = web3.utils.toChecksumAddress(await _biofund.methods.owners(1).call());\n      const _thirdBioFundOwner = web3.utils.toChecksumAddress(await _biofund.methods.owners(2).call());\n      const _biofundBalance = await web3.eth.getBalance(_biofund.options.address);\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({\n        web3: web3,\n        account: _account,\n        producttoken: _producttoken,\n        store: _store,\n        biofund: _biofund,\n        owner: _owner, \n        firstBioFundOwner: _firstBioFundOwner,\n        secondBioFundOwner: _secondBioFundOwner,\n        thirdBioFundOwner: _thirdBioFundOwner,\n        biofundBalance: _biofundBalance,\n      });\n      this.decideHowToLoad();\n\n      window.ethereum.on('accountsChanged',  (accounts) => {\n        const _account = web3.utils.toChecksumAddress(accounts[0]);\n        this.setState({ account: _account });\n        this.decideHowToLoad()});\n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n\n  decideHowToLoad() {\n    document.getElementById(\"productInfo\").style.display = 'none';\n      switch (this.state.account) {\n        case this.state.owner:\n          this.loadForOwner();\n          break;\n        case this.state.firstBioFundOwner: \n          this.loadForMultisig();       \n          break;\n        case this.state.secondBioFundOwner: \n          this.loadForMultisig();       \n          break;\n        case this.state.thirdBioFundOwner: \n          this.loadForMultisig();       \n          break;\n        default: \n          this.loadForUser();\n      }\n    }\n\n  loadForOwner = async () => {\n    document.getElementById(\"store\").style.display = 'none';\n    document.getElementById(\"ownerOnly\").style.display = 'block';\n    document.getElementById(\"multisigOwners\").style.display = 'none';\n  }\n\n  loadForUser = async () => {\n    document.getElementById(\"store\").style.display = 'block';\n    document.getElementById(\"ownerOnly\").style.display = 'none';\n    document.getElementById(\"multisigOwners\").style.display = 'none';\n    this.refreshUserBalance();\n  }\n\n  loadForMultisig = async () => {\n    document.getElementById(\"store\").style.display = 'none';\n    document.getElementById(\"ownerOnly\").style.display = 'none';\n    document.getElementById(\"multisigOwners\").style.display = 'block';\n    document.getElementById(\"transactionInfo\").style.display = 'none';\n    this.refreshMultiSigBalance();\n  }\n\n  setStatus = (message) => {\n    document.getElementById(\"status\").innerHTML = message;\n  }\n\n  refreshUserBalance = async () => {\n    //show metamask account\n    document.getElementsByClassName(\"user\")[0].innerHTML = this.state.account;\n    //show ERC-721 balance \n    const balance = await this.state.producttoken.methods.balanceOf(this.state.account).call();\n    document.getElementsByClassName(\"balance\")[0].innerHTML = balance;\n    //show total ERC-721 supply\n    const supply = await this.state.producttoken.methods.totalSupply().call();\n    document.getElementsByClassName(\"supply\")[0].innerHTML = supply;\n    //show ERC-721 owned by user and show options on put on sale\n    this.getAllProductsFromOwner(this.state.account);\n    //show eth balance in store contract\n    const ethBalance = await this.state.store.methods.checkEthBalance().call({from: this.state.account});\n    document.getElementsByClassName(\"ethBalance\")[0].innerHTML = ethBalance;\n    //show options to buy and for info\n    this.getAllProductsForSale();\n  }\n\n  refreshMultiSigBalance = async () => {\n      document.getElementById(\"bioFundBalance\").innerHTML = this.state.biofundBalance;\n      this.getTransactionInfo();\n  }\n\n  handleSetStoreAddress = async (event) => {\n    console.log('reached setStoreAddress' + event)\n    if (typeof this.state.producttoken !== 'undefined') {\n      event.preventDefault();\n      await this.state.producttoken.methods.setStoreAddress(this.state.newStore).send({from: this.state.account})\n    }\n    this.setStatus(\"Initiating transaction... (please wait)\");\n    window.toastProvider.addMessage(\"New store contract registered!\", {\n      variant: \"success\"\n    })\n    this.setStatus(\"Transaction complete!\");\n  }\n\n  handleCreateProduct = async (event) => {\n    console.log('reached createdProduct' + event)\n    if (typeof this.state.producttoken !== 'undefined') {\n      event.preventDefault();\n      await this.state.producttoken.methods.createProduct(this.state.newProductName,this.state.newProductBio).send({from: this.state.account})\n    }\n    this.setStatus(\"Initiating transaction... (please wait)\");\n    window.toastProvider.addMessage(\"Product Created!\", {\n      variant: \"success\"\n    })\n    this.setStatus(\"Transaction complete!\");\n    this.refreshUserBalance();\n  }\n\n  handleSetProductForSale = async (event) => {\n    console.log('reached setProductForSale' + event)\n    if (typeof this.state.producttoken !== 'undefined') {\n      event.preventDefault();\n      await this.state.producttoken.methods.setProductForSale(this.state.newSaleId, this.state.newSalePrice).send({from: this.state.account})\n    }\n    this.setStatus(\"Initiating transaction... (please wait)\");\n    window.toastProvider.addMessage(\"Product on Sale!\", {\n      variant: \"success\"\n    })\n    this.setStatus(\"Transaction complete!\");\n    this.refreshUserBalance();\n  }\n\n  getProductInfo = async () => { \n    document.getElementById(\"productInfo\").style.display = 'block';\n    try {\n      //get product owner\n      const productOwner = await this.state.producttoken.methods.ownerOf(this.state.idForInfo).call();\n      document.getElementById(\"_ownerOf\").innerHTML = productOwner;\n      //get product name\n      const productName = await this.state.producttoken.methods.getProductName(this.state.idForInfo).call();\n      document.getElementById(\"_name\").innerHTML = productName;\n      //is product bio\n      const productBio = await this.state.producttoken.methods.isProductBio(this.state.idForInfo).call();\n      document.getElementById(\"_bio\").innerHTML = productBio;\n      //get product creator\n      const productCreator = await this.state.producttoken.methods.getProductCreator(this.state.idForInfo).call();\n      document.getElementById(\"_creator\").innerHTML = productCreator;\n      //is product for sale\n      const productSale = await this.state.producttoken.methods.isProductForSale(this.state.idForInfo).call();\n      document.getElementById(\"_forSale\").innerHTML = productSale;\n      //get product price\n      const productPrice = await this.state.producttoken.methods.getProductPrice(this.state.idForInfo).call();\n      document.getElementById(\"_price\").innerHTML = productPrice;\n      } catch (error) {\n        document.getElementById(\"productInfo\").innerHTML = \"This product doesn't exist\";\n      }\n  }\n\n  getAllProductsFromOwner = async () => { \n    const supply =  await this.state.producttoken.methods.totalSupply().call();\n    var _productsOwned = [];\n    var _sellOptions = [];\n\n    for ( var id=1; id<=supply; id++ ) {\n      const _productOwner = await this.state.producttoken.methods.ownerOf(id).call();\n      if ( _productOwner === this.state.account ) {\n        _productsOwned.push(id); //show products list on welcome statement\n        _sellOptions.push({value: id, label: id});\n      }\n    }\n    this.setState({productsOwned: _productsOwned, sellOptions: _sellOptions});\n    if (_productsOwned.length === 0) {\n      document.getElementById(\"products\").innerHTML = \"You don't own any product yet. Go create or buy your first one!\";\n\n    } else {\n      document.getElementById(\"products\").innerHTML = _productsOwned;\n    }\n  }\n\n  getAllProductsForSale = async () => { \n    const supply =  await this.state.producttoken.methods.totalSupply().call();\n    var _buyOptions = [];\n    var _infoOptions = [];\n    for ( var id=1; id<=supply; id++ ) {\n      _infoOptions.push({value: id, label: id});\n      if ( await this.state.producttoken.methods.isProductForSale(id).call() ) {\n        _buyOptions.push({value: id, label: id});\n      }\n    }\n    this.setState({buyOptions: _buyOptions, infoOptions: _infoOptions});\n  }\n\n  handleSetNewProductContract = async (event) => {\n    console.log('reached setNewProductContract' + event)\n    if (typeof this.state.store !== 'undefined') {\n      event.preventDefault();\n      await this.state.store.methods.setNewProductContract(this.state.newProductToken).send({from: this.state.account})\n    }\n    this.setStatus(\"Initiating transaction... (please wait)\");\n    window.toastProvider.addMessage(\"New Product Contract registered!\", {\n      variant: \"success\"\n    })\n    this.setStatus(\"Transaction complete!\");\n  }\n\n  handleSetBiodiversityFund = async (event) => {\n    console.log('reached setBiodiversityFund' + event)\n    if (typeof this.state.store !== 'undefined') {\n      event.preventDefault();\n      await this.state.store.methods.setBiodiversityFund(this.state.newBioFund).send({from: this.state.account})\n    }\n    this.setStatus(\"Initiating transaction... (please wait)\");\n    window.toastProvider.addMessage(\"New Biodiversity Fund registered!\", {\n      variant: \"success\"\n    })\n    this.setStatus(\"Transaction complete!\");\n  }\n\n  handleBuyProduct = async (event) => {\n    console.log('reached buyProduct' + event)\n    if (typeof this.state.store !== 'undefined') {\n      event.preventDefault();\n      const _price = await this.state.producttoken.methods.getProductPrice(this.state.newPurchaseId).call();\n      await this.state.store.methods.buyProduct(this.state.newPurchaseId).send({from: this.state.account, value: _price});\n    }\n    this.setStatus(\"Initiating transaction... (please wait)\");\n    window.toastProvider.addMessage(\"Congrats! You just bought a product!\", {\n      variant: \"success\"\n    })\n    this.setStatus(\"Transaction complete!\");\n    this.refreshUserBalance();\n  }\n\n  handleUserWithdraw = async (event) => {\n    console.log('reached userWithdraw' + event)\n    if (typeof this.state.store !== 'undefined') {\n      event.preventDefault();\n      const _ethBalance = await this.state.store.methods.checkEthBalance().call({from: this.state.account});\n      await this.state.store.methods.withdraw(_ethBalance).send({from: this.state.account});\n    }\n    this.setStatus(\"Initiating transaction... (please wait)\");\n    window.toastProvider.addMessage(\"Congrats! You just bought a product!\", {\n      variant: \"success\"\n    })\n    this.setStatus(\"Transaction complete!\");\n    this.refreshUserBalance();\n  }\n\n  handleSubmitTransaction = async (event) => {\n    console.log('reached submitTransaction' + event)\n    if (typeof this.state.biofund !== 'undefined') {\n      event.preventDefault();\n      await this.state.biofund.methods.submitTransaction(this.state.newTxAddress, this.state.newTxValue, \"00\").send({from: this.state.account});\n    }\n    this.setStatus(\"Initiating transaction... (please wait)\");\n    window.toastProvider.addMessage(\"Transaction submitted for approval\", {\n      variant: \"success\"\n    })\n    this.setStatus(\"Transaction complete!\");\n    this.refreshMultiSigBalance();\n  }\n\n  handleApproveTransaction = async (event) => {\n    console.log('reached approveTransaction' + event)\n    if (typeof this.state.biofund !== 'undefined') {\n      event.preventDefault();\n      await this.state.biofund.methods.confirmTransaction(this.state.idForApproval).send({from: this.state.account});\n    }\n    this.setStatus(\"Initiating transaction... (please wait)\");\n    window.toastProvider.addMessage(\"Transaction Approved\", {\n      variant: \"success\"\n    })\n    this.setStatus(\"Transaction complete!\");\n    this.refreshMultiSigBalance();\n  }\n\n  handleRevokeApproval = async (event) => {\n    console.log('reached revokeApproval' + event)\n    if (typeof this.state.biofund !== 'undefined') {\n      event.preventDefault();\n      await this.state.biofund.methods.revokeConfirmation(this.state.idToRevoke).send({from: this.state.account});\n    }\n    this.setStatus(\"Initiating transaction... (please wait)\");\n    window.toastProvider.addMessage(\"Transaction Approved\", {\n      variant: \"success\"\n    })\n    this.setStatus(\"Transaction complete!\");\n    this.refreshMultiSigBalance();\n  }\n\n  handleExecuteTransaction = async (event) => {\n    console.log('reached revokeTransaction' + event)\n    if (typeof this.state.biofund !== 'undefined') {\n      event.preventDefault();\n      await this.state.biofund.methods.executeTransaction(this.state.idToExecute).send({from: this.state.account});\n    }\n    this.setStatus(\"Initiating transaction... (please wait)\");\n    window.toastProvider.addMessage(\"Transaction Executed\", {\n      variant: \"success\"\n    })\n    this.setStatus(\"Transaction complete!\");\n    this.refreshMultiSigBalance();\n  }\n\n  getTransactionInfo = async () => { \n    document.getElementById(\"transactionInfo\").style.display = 'block';\n    try {\n      //get transaction destination\n      const txDestination = await this.state.biofund.methods.getTransactionDestination(this.state.txIdForInfo).call();\n      document.getElementById(\"_txDestination\").innerHTML = txDestination;\n      //get transaction value\n      const txValue = await this.state.biofund.methods.getTransactionValue(this.state.txIdForInfo).call();\n      document.getElementById(\"_txValue\").innerHTML = txValue;\n      //get if transaction is executed\n      const txExecuted = await this.state.biofund.methods.isTransactionExecuted(this.state.txIdForInfo).call();\n      document.getElementById(\"_txExecuted\").innerHTML = txExecuted;\n      //get if user has already confirmed\n      const txUserConfirm = await this.state.biofund.methods.hasUserConfirmed(this.state.txIdForInfo).call({from: this.state.account});\n      document.getElementById(\"_txUserConfirm\").innerHTML = txUserConfirm;\n    } catch (error) {\n      document.getElementById(\"transactionInfo\").innerHTML = \"This product doesn't exist\";\n      }\n  }\n\n  // Handle form data change\n  handleChange = (event) => {\n    switch(event.target.name) {\n        case \"newProductName\":\n            this.setState({\"newProductName\": event.target.value})\n            break;\n        case \"newProductBio\":\n            this.setState({\"newProductBio\": event.target.value})\n            break;\n        case \"newSaleId\":\n          this.setState({newSaleId: event.target.value})\n            break;\n        case \"newSalePrice\":\n          this.setState({newSalePrice: event.target.value})\n            break;\n        case \"newPurchaseId\":\n            this.setState({\"newPurchaseId\": event.target.value})\n            break;\n        case \"newStore\":\n            this.setState({\"newStore\": event.target.value})\n            break;\n        case \"newProductToken\":\n            this.setState({\"newProductToken\": event.target.value})\n            break;\n        case \"newBioFund\":\n            this.setState({\"newBioFund\": event.target.value})\n            break;\n        case \"newTxAddress\":\n            this.setState({\"newTxAddress\": event.target.value})\n            break;\n        case \"newTxValue\":\n            this.setState({\"newTxValue\": event.target.value})\n            break;\n        case \"idForApproval\":\n            this.setState({\"idForApproval\": event.target.value})\n            break;\n        case \"idToRevoke\":\n            this.setState({\"idToRevoke\": event.target.value})\n            break;\n        case \"idToExecute\":\n            this.setState({\"idToExecute\": event.target.value})\n            break;\n        case \"idForInfo\":\n            this.setState({\"idForInfo\": event.target.value}, () => {\n              this.getProductInfo()\n          });\n            break;\n        case \"txIdForInfo\":\n            this.setState({\"txIdForInfo\": event.target.value}, () => {\n              this.getTransactionInfo()\n          });\n            break;\n        default:\n            break;\n    }\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <Box bg=\"#8FC7E8\" border='3px solid' borderColor=\"DarkCyan\">\n          <br/>\n          <Heading as={\"h1\"}> BioPlace </Heading>\n          <Text fontWeight='bold'> The First Decentralized Nagoya Protocol-Compliant Marketplace </Text>\n          <br/>\n      </Box>\n\n      <Box>\n          <Text italic> <p id=\"status\"></p> </Text>\n      </Box>\n\n      <div id=\"store\">\n        <Flex fontSize={1} textAlign='left'>\n          <Box width={1 / 20}></Box>\n          <Box id=\"blockie\" width={1 / 20}>\n            <Blockie opts={{seed: String(this.state.account)}} />\n          </Box>\n          <Box width={1 / 5}>\n              Hey, <strong className=\"user\">loading...</strong>! <br/>\n              You currently own <strong className=\"balance\">loading...</strong> of all <strong className=\"supply\">loading...</strong> Tokenized Biodiversity Products. <br/>\n              The products you own are: <strong id=\"products\">loading...</strong> <br/>\n              Balance in the store is: <strong className=\"ethBalance\">loading...</strong> wei.\n            <Button size=\"small\" mainColor=\"DarkCyan\" value=\"submit\" onClick={this.handleUserWithdraw}>Withdraw</Button>\n          </Box>\n          <Box width={1 / 5}></Box>\n          <Box width={1 / 5}>\n          <Field label=\"Check info on a product:\">\n            <Select type=\"text\" name=\"idForInfo\" placeholder=\"e.g. 10\" required={true} onChange={this.handleChange} options={this.state.infoOptions} />\n          </Field>\n          </Box>\n          <Box width={1 / 20}></Box>\n          <Box width={1 / 5}>\n            <p id=\"productInfo\">\n              Product name: <strong id=\"_name\">loading...</strong> <br/>\n              Is it biodiversity based? <strong id=\"_bio\">loading...</strong> <br/>\n              Product's original creator: <strong id=\"_creator\">loading...</strong> <br/>\n              Is it for sale? <strong id=\"_forSale\">loading...</strong> <br/>\n              Product's price: <strong id=\"_price\">loading...</strong> <br/>\n              Product's curent owner: <strong id=\"_ownerOf\">loading...</strong> <br/>\n            </p>\n          </Box>\n          <Box width={1 / 5}></Box>\n        </Flex>\n        <br/><br/>\n          <Flex fontSize={1}>\n          <Box width={1 / 40}></Box>\n            <Box bg=\"#8FC7E8\" p={3} width={1 / 3} border='3px solid' borderColor=\"DarkCyan\"> \n              <Heading> Create a new tokenized biodiversity product </Heading>\n                <Form>\n                  <Box>\n                    <Field label=\"Enter your product name:\">\n                      <Input type=\"text\" placeholder=\"e.g. Palm Oil\" required={true} name=\"newProductName\" value={this.state.newProductName} onChange={this.handleChange}/>\n                    </Field>\n                  </Box>\n\n                  <Box>\n                  <Field label=\"Is it biodiversity based?\">\n                  <Select required={true} name=\"newProductBio\" value={this.state.newProductBio} onChange={this.handleChange} options={[ {value: \"true\", label: \"Yes\"}, {value: \"false\", label: \"No\"} ]}/>\n                  </Field>\n                  </Box>\n\n                  <Box>\n                    <ToastMessage.Provider ref={node => (window.toastProvider = node)} />\n                    <Button size=\"medium\" mainColor=\"#074F9A\" value=\"submit\" onClick={this.handleCreateProduct}>Create Product</Button>\n                  </Box>\n                </Form>\n            </Box>\n            <Box width={1 / 40}></Box>\n            <Box p={3} width={1 / 3} bg=\"#8FC7E8\" border='3px solid' borderColor=\"DarkCyan\">\n              <Heading> Put your tokenized biodiversity products on sale </Heading>\n                <Form>\n                  <Box>\n                    <Field label=\"Choose the product you want to sell\">\n                    <Select required={true} name=\"newSaleId\" value={this.state.newSaleId} onChange={this.handleChange} options={this.state.sellOptions} />\n                    </Field>\n                  </Box>\n                  <Box>\n                    <Field label=\"For how much you want to sell it? Price in wei.\">\n                      <Input type=\"text\" placeholder=\"e.g. 1000\" required={true} name=\"newSalePrice\" value={this.state.newSalePrice} onChange={this.handleChange} />\n                    </Field>\n                  </Box>\n                  <Box>\n                    <ToastMessage.Provider ref={node => (window.toastProvider = node)} />\n                    <Button size=\"medium\" mainColor=\"#074F9A\" value=\"submit\" onClick={this.handleSetProductForSale}>Sell Product</Button>\n                  </Box>\n                </Form>\n            </Box>\n            <Box width={1 / 40}></Box>\n            <Box bg=\"#8FC7E8\" border='3px solid' borderColor=\"DarkCyan\" p={3} width={1 / 3}>\n              <Heading> Buy a tokenized product </Heading>\n                <Form>\n                <Box>\n                  <Field label=\"Choose the product you want to buy\">\n                  <Select required={true} name=\"newPurchaseId\" value={this.state.newPurchaseId} onChange={this.handleChange} options={this.state.buyOptions} />\n                  </Field>\n                  </Box>\n\n                  <Box>\n                    <ToastMessage.Provider ref={node => (window.toastProvider = node)} />\n                    <Button size=\"medium\" mainColor=\"#074F9A\" value=\"submit\" onClick={this.handleBuyProduct}>Buy Product</Button>\n                  </Box>\n                </Form>\n            </Box>\n            <Box width={1 / 40}></Box>\n          </Flex>\n      </div>\n\n<div id=\"ownerOnly\">\n          <Flex>\n            <Box p={3} width={1 / 3}>\n              <Heading> Register store's contract </Heading>\n                <Form>\n                <Box>\n                  <Field label=\"Paste the Store Contract Address here:\">\n                  <Input type=\"text\" placeholder=\"e.g. 0xdebeaac00deab8c047efbcd8a4bde696f1b890da\" required={true} name=\"newStore\" value={this.state.newStore} onChange={this.handleChange}/>\n                  </Field>\n                  </Box>\n                  <Box>\n                    <ToastMessage.Provider ref={node => (window.toastProvider = node)} />\n                    <Button value=\"submit\" onClick={this.handleSetStoreAddress}>Set Store Address</Button>\n                  </Box>\n                </Form>\n            </Box>\n\n            <Box p={3} width={1 / 3}>\n              <Heading> Register new Product Token contract </Heading>\n                <Form>\n                <Box>\n                  <Field label=\"Paste the new product token address here:\">\n                  <Input type=\"text\" placeholder=\"e.g. 0xb4D62D88C226C9E91D617eEd660BFF3043eBAB78\" required={true} name=\"newProductToken\" value={this.state.newProductToken} onChange={this.handleChange}/>\n                  </Field>\n                  </Box>\n                  <Box>\n                    <ToastMessage.Provider ref={node => (window.toastProvider = node)} />\n                    <Button value=\"submit\" onClick={this.handleSetNewProductContract}>Set New Product Contract</Button>\n                  </Box>\n                </Form>\n            </Box>\n\n            <Box p={3} width={1 / 3}>\n              <Heading> Register Biodiversity Fund contract </Heading>\n                <Form>\n                <Box>\n                  <Field label=\"Paste the new Biodiversity Fund address here:\">\n                  <Input type=\"text\" placeholder=\"e.g. 0x5762B0e08D5636E46709f7543840f8B98B89fdF3\" required={true} name=\"newBioFund\" value={this.state.newBioFund} onChange={this.handleChange}/>\n                  </Field>\n                  </Box>\n                  <Box>\n                    <ToastMessage.Provider ref={node => (window.toastProvider = node)} />\n                    <Button value=\"submit\" onClick={this.handleSetBiodiversityFund}>Set New BioFund Contract</Button>\n                  </Box>\n                </Form>\n            </Box>\n          </Flex>\n</div>\n\n<div id=\"multisigOwners\">\n          <Flex>\n            <Box width={1 / 20}></Box>\n            <Box width={1 / 20}></Box>\n            <Box width={1 / 5}>\n              <legend className=\"welcome\">BioFund Balance</legend>\n              Current balance in Biodiversity Contract: <strong id=\"bioFundBalance\">loading...</strong> .\n            </Box>\n            <Box width={1 / 5}></Box>\n            <Box width={1 / 5}>\n              <Field label=\"Check info on a transaction:\">\n                <Input type=\"text\" name=\"txIdForInfo\" placeholder=\"e.g. 10\" required={true} onChange={this.handleChange}/>\n              </Field>\n            </Box>\n            <Box width={1 / 20}></Box>\n            <Box width={1 / 5}>\n              <p id=\"transactionInfo\">\n                  Where the money is being sent to: <strong id=\"_txDestination\">loading...</strong> <br/>\n                  How much money is being sent: <strong id=\"_txValue\">loading...</strong> <br/>\n                  Has the transaction already been executed? <strong id=\"_txExecuted\">loading...</strong> <br/>\n                  Did a approve this transaction already? <strong id=\"_txUserConfirm\">loading...</strong> \n              </p>\n            </Box>\n            <Box width={1 / 5}></Box>\n          </Flex>\n\n          <Flex>\n            <Box p={3} width={1 / 4}>\n              <Heading> Submit Transaction for Approval </Heading>\n                <Form>\n                  <Box>\n                    <Field label=\"Paste the transaction destination address here:\">\n                    <Input required={true} name=\"newTxAddress\" placeholder=\"e.g. 0x93e66d9baea28c17d9fc393b53e3fbdd76899dae\" value={this.state.newTxAddress} onChange={this.handleChange} />\n                    </Field>\n                  </Box>\n                  <Box>\n                    <Field label=\"Write the transaction value here:\">\n                    <Input required={true} name=\"newTxValue\" placeholder=\"e.g. 1000\" value={this.state.newTxValue} onChange={this.handleChange} />\n                    </Field>\n                  </Box>\n                  <Box>\n                    <ToastMessage.Provider ref={node => (window.toastProvider = node)} />\n                    <Button value=\"submit\" onClick={this.handleSubmitTransaction}>Submit Transaction</Button>\n                  </Box>\n                </Form>\n            </Box>\n            <Box p={3} width={1 / 4}>\n              <Heading> Approve proposed transaction </Heading>\n                <Form>\n                  <Box>\n                    <Field label=\"Write the id of the transaction you want to approve:\">\n                    <Input required={true} name=\"idForApproval\" placeholder=\"e.g. 1\" value={this.state.idForApproval} onChange={this.handleChange} />\n                    </Field>\n                  </Box>\n                  <Box>\n                    <ToastMessage.Provider ref={node => (window.toastProvider = node)} />\n                    <Button value=\"submit\" onClick={this.handleApproveTransaction}>Approve Transaction</Button>\n                  </Box>\n                </Form>\n            </Box>\n            <Box p={3} width={1 / 4}>\n              <Heading> Revoke approval for transaction </Heading>\n                <Form>\n                  <Box>\n                    <Field label=\"Write the id of the transaction you want to revoke:\">\n                    <Input required={true} name=\"idToRevoke\" placeholder=\"e.g. 1\" value={this.state.idToRevoke} onChange={this.handleChange} />\n                    </Field>\n                  </Box>\n                  <Box>\n                    <ToastMessage.Provider ref={node => (window.toastProvider = node)} />\n                    <Button value=\"submit\" onClick={this.handleRevokeApproval}>Revoke Approval</Button>\n                  </Box>\n                </Form>\n            </Box>\n            <Box p={3} width={1 / 4}>\n              <Heading> Execute transaction </Heading>\n                <Form>\n                  <Box>\n                    <Field label=\"Write the id of the transaction you want to execute:\">\n                    <Input required={true} name=\"idToExecute\" placeholder=\"e.g. 1\" value={this.state.idToExecute} onChange={this.handleChange} />\n                    </Field>\n                  </Box>\n                  <Box>\n                    <ToastMessage.Provider ref={node => (window.toastProvider = node)} />\n                    <Button value=\"submit\" onClick={this.handleExecuteTransaction}>Execute Transaction</Button>\n                  </Box>\n                </Form>\n            </Box>\n          </Flex>\n</div>\n\n<br/>\n<p> Developed by <strong>@bschorchit</strong> during <strong>Consensys Blockchain Developer Bootcamp</strong> </p>\n\n      </div>\n  \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}